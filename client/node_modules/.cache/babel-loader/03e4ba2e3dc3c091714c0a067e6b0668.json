{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/RA/FacialTest/client/src/components/volume-adjust/main.jsx\";\nimport React from \"react\";\nimport { Button, Container } from \"@material-ui/core\";\nimport VolumeSlider from \"../../assets/volume-slider\";\n\nclass VolumeAdjustment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      const {\n        audio,\n        audioVolume\n      } = this.state;\n      audio.volume = audioVolume;\n    };\n\n    this.componentDidUpdate = () => {\n      const {\n        audio,\n        audioVolume\n      } = this.state;\n      audio.volume = audioVolume;\n    };\n\n    this.calculateDB = audio => {\n      const audioCtx = new AudioContext(); // const processor = audioCtx.createScriptProcessor(2048, 1, 1);\n\n      const processor = audioCtx.createScriptProcessor(0, 1, 1);\n      const source = audioCtx.createMediaElementSource(audio);\n      source.connect(processor);\n      source.connect(audioCtx.destination);\n      processor.connect(audioCtx.destination);\n\n      processor.onaudioprocess = function (evt) {\n        const input = evt.inputBuffer.getChannelData(0);\n        const len = input.length;\n        let total = 0;\n        let i = 0;\n        let rms; // root mean square\n\n        while (i < len) total += Math.abs(input[i++]);\n\n        rms = Math.sqrt(total / len); // rms = Math.sqrt(total / (len / 2));\n        // const decibel = 20 * (Math.log(rms) / Math.log(10));\n\n        console.log(rms * 100);\n      };\n    };\n\n    this.handleHeadPhone = () => {\n      const {\n        volumeAdjuest\n      } = this.state;\n      this.setState({\n        volumeAdjuest: !volumeAdjuest\n      });\n    };\n\n    this.handleSpeaker = () => {\n      const {\n        volumeAdjuest\n      } = this.state;\n      this.setState({\n        volumeAdjuest: !volumeAdjuest\n      });\n    };\n\n    this.handlePlay = async () => {\n      const {\n        audio\n      } = this.state; // this.calculateDB(audio);\n\n      await audio.play();\n      this.setState({\n        audioPlay: true\n      });\n    };\n\n    this.handleStop = async () => {\n      const {\n        audio\n      } = this.state;\n      await audio.pause();\n      this.setState({\n        audioPlay: false\n      });\n    };\n\n    this.handleNext = async () => {\n      await this.handleStop();\n      this.props.handleNext();\n    };\n\n    this.handleVolume = volume => {\n      this.setState({\n        audioVolume: volume / 100\n      });\n      this.props.handleVolume(volume);\n    };\n\n    this.askAudioOutput = () => {\n      const {\n        audioPlay\n      } = this.state;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h6\", {\n        className: \"font-weight-light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      }, \"Set your device volume to the half. Click PLAY to listen to an audio sample.\"), /*#__PURE__*/React.createElement(\"h6\", {\n        className: \"font-weight-light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }\n      }, \"Slide the volume to a comfortable listening level. After that, click NEXT to begin the test.\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(VolumeSlider, {\n        handleVolume: this.handleVolume,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }), audioPlay ? /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: this.handleStop,\n        style: {\n          margin: 5,\n          width: 150,\n          backgroundColor: \"black\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }\n      }, \"Stop\") : /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: this.handlePlay,\n        style: {\n          margin: 5,\n          width: 150,\n          backgroundColor: \"black\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      }, \"Play\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        style: {\n          margin: 5,\n          width: 150,\n          backgroundColor: \"black\"\n        },\n        onClick: this.handleNext,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }\n      }, \"Next\")));\n    };\n\n    this.state = {\n      volumeAdjuest: false,\n      audio: new Audio(process.env.PUBLIC_URL + \"/audios/adjust.wav\"),\n      audioPlay: false,\n      audioVolume: 0.5\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 12\n      }\n    }, this.askAudioOutput());\n  }\n\n}\n\nexport default VolumeAdjustment;","map":{"version":3,"sources":["/Users/user/Documents/RA/FacialTest/client/src/components/volume-adjust/main.jsx"],"names":["React","Button","Container","VolumeSlider","VolumeAdjustment","Component","constructor","props","componentDidMount","audio","audioVolume","state","volume","componentDidUpdate","calculateDB","audioCtx","AudioContext","processor","createScriptProcessor","source","createMediaElementSource","connect","destination","onaudioprocess","evt","input","inputBuffer","getChannelData","len","length","total","i","rms","Math","abs","sqrt","console","log","handleHeadPhone","volumeAdjuest","setState","handleSpeaker","handlePlay","play","audioPlay","handleStop","pause","handleNext","handleVolume","askAudioOutput","margin","width","backgroundColor","Audio","process","env","PUBLIC_URL","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button, Container } from \"@material-ui/core\";\nimport VolumeSlider from \"../../assets/volume-slider\";\n\nclass VolumeAdjustment extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      volumeAdjuest: false,\n      audio: new Audio(process.env.PUBLIC_URL + \"/audios/adjust.wav\"),\n      audioPlay: false,\n      audioVolume: 0.5,\n    };\n  }\n  componentDidMount = () => {\n    const { audio, audioVolume } = this.state;\n    audio.volume = audioVolume;\n  };\n\n  componentDidUpdate = () => {\n    const { audio, audioVolume } = this.state;\n    audio.volume = audioVolume;\n  };\n\n  calculateDB = (audio) => {\n    const audioCtx = new AudioContext();\n    // const processor = audioCtx.createScriptProcessor(2048, 1, 1);\n    const processor = audioCtx.createScriptProcessor(0, 1, 1);\n    const source = audioCtx.createMediaElementSource(audio);\n    source.connect(processor);\n    source.connect(audioCtx.destination);\n    processor.connect(audioCtx.destination);\n    processor.onaudioprocess = function (evt) {\n      const input = evt.inputBuffer.getChannelData(0);\n      const len = input.length;\n      let total = 0;\n      let i = 0;\n      let rms; // root mean square\n      while (i < len) total += Math.abs(input[i++]);\n      rms = Math.sqrt(total / len);\n      // rms = Math.sqrt(total / (len / 2));\n      // const decibel = 20 * (Math.log(rms) / Math.log(10));\n      console.log(rms * 100);\n    };\n  };\n\n  handleHeadPhone = () => {\n    const { volumeAdjuest } = this.state;\n    this.setState({ volumeAdjuest: !volumeAdjuest });\n  };\n\n  handleSpeaker = () => {\n    const { volumeAdjuest } = this.state;\n    this.setState({ volumeAdjuest: !volumeAdjuest });\n  };\n\n  handlePlay = async () => {\n    const { audio } = this.state;\n    // this.calculateDB(audio);\n    await audio.play();\n    this.setState({ audioPlay: true });\n  };\n\n  handleStop = async () => {\n    const { audio } = this.state;\n    await audio.pause();\n    this.setState({ audioPlay: false });\n  };\n\n  handleNext = async () => {\n    await this.handleStop();\n    this.props.handleNext();\n  };\n\n  handleVolume = (volume) => {\n    this.setState({ audioVolume: volume / 100 });\n    this.props.handleVolume(volume);\n  };\n\n  askAudioOutput = () => {\n    const { audioPlay } = this.state;\n    return (\n      <div>\n        <Container>\n          <h6 className=\"font-weight-light\">\n            Set your device volume to the half. Click PLAY to listen to an audio\n            sample.\n          </h6>\n          <h6 className=\"font-weight-light\">\n            Slide the volume to a comfortable listening level. After that, click\n            NEXT to begin the test.\n          </h6>\n        </Container>\n\n        <div className=\"row\">\n          <VolumeSlider handleVolume={this.handleVolume} />\n          {audioPlay ? (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.handleStop}\n              style={{ margin: 5, width: 150, backgroundColor: \"black\" }}\n            >\n              Stop\n            </Button>\n          ) : (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.handlePlay}\n              style={{\n                margin: 5,\n                width: 150,\n                backgroundColor: \"black\",\n              }}\n            >\n              Play\n            </Button>\n          )}\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ margin: 5, width: 150, backgroundColor: \"black\" }}\n            onClick={this.handleNext}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    );\n  };\n  render() {\n    return <div>{this.askAudioOutput()}</div>;\n  }\n}\n\nexport default VolumeAdjustment;\n"]},"metadata":{},"sourceType":"module"}